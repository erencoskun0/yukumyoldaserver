// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using yukumyolda.Persistence;

#nullable disable

namespace yukumyolda.Persistence.Migrations
{
    [DbContext(typeof(YukumYoldaContext))]
    partial class YukumYoldaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.Evaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EvaluatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EvaluatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LoadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatedUserId");

                    b.HasIndex("LoadId");

                    b.HasIndex("EvaluatorUserId", "LoadId")
                        .IsUnique();

                    b.ToTable("Evaluations", null, t =>
                        {
                            t.HasCheckConstraint("CK_Evaluation_SelfEvaluation", "[EvaluatorUserId] <> [EvaluatedUserId]");
                        });
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.Load", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeparturevId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DestinationProvinceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LoadStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoadTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DeparturevId");

                    b.HasIndex("DestinationProvinceId");

                    b.HasIndex("LoadStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Loads");
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.LoadStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("StateName")
                        .IsUnique();

                    b.ToTable("LoadStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StateName = "Araç Aranıyor"
                        },
                        new
                        {
                            Id = 2,
                            StateName = "Araç Bulundu"
                        },
                        new
                        {
                            Id = 3,
                            StateName = "İptal Edildi"
                        });
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceName")
                        .IsUnique();

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProvinceName = "Adana"
                        },
                        new
                        {
                            Id = 2,
                            ProvinceName = "Adıyaman"
                        },
                        new
                        {
                            Id = 3,
                            ProvinceName = "Afyonkarahisar"
                        },
                        new
                        {
                            Id = 4,
                            ProvinceName = "Ağrı"
                        },
                        new
                        {
                            Id = 5,
                            ProvinceName = "Amasya"
                        },
                        new
                        {
                            Id = 6,
                            ProvinceName = "Ankara"
                        },
                        new
                        {
                            Id = 7,
                            ProvinceName = "Antalya"
                        },
                        new
                        {
                            Id = 8,
                            ProvinceName = "Artvin"
                        },
                        new
                        {
                            Id = 9,
                            ProvinceName = "Aydın"
                        },
                        new
                        {
                            Id = 10,
                            ProvinceName = "Balıkesir"
                        },
                        new
                        {
                            Id = 11,
                            ProvinceName = "Bilecik"
                        },
                        new
                        {
                            Id = 12,
                            ProvinceName = "Bingöl"
                        },
                        new
                        {
                            Id = 13,
                            ProvinceName = "Bitlis"
                        },
                        new
                        {
                            Id = 14,
                            ProvinceName = "Bolu"
                        },
                        new
                        {
                            Id = 15,
                            ProvinceName = "Burdur"
                        },
                        new
                        {
                            Id = 16,
                            ProvinceName = "Bursa"
                        },
                        new
                        {
                            Id = 17,
                            ProvinceName = "Çanakkale"
                        },
                        new
                        {
                            Id = 18,
                            ProvinceName = "Çankırı"
                        },
                        new
                        {
                            Id = 19,
                            ProvinceName = "Çorum"
                        },
                        new
                        {
                            Id = 20,
                            ProvinceName = "Denizli"
                        },
                        new
                        {
                            Id = 21,
                            ProvinceName = "Diyarbakır"
                        },
                        new
                        {
                            Id = 22,
                            ProvinceName = "Edirne"
                        },
                        new
                        {
                            Id = 23,
                            ProvinceName = "Elazığ"
                        },
                        new
                        {
                            Id = 24,
                            ProvinceName = "Erzincan"
                        },
                        new
                        {
                            Id = 25,
                            ProvinceName = "Erzurum"
                        },
                        new
                        {
                            Id = 26,
                            ProvinceName = "Eskişehir"
                        },
                        new
                        {
                            Id = 27,
                            ProvinceName = "Gaziantep"
                        },
                        new
                        {
                            Id = 28,
                            ProvinceName = "Giresun"
                        },
                        new
                        {
                            Id = 29,
                            ProvinceName = "Gümüşhane"
                        },
                        new
                        {
                            Id = 30,
                            ProvinceName = "Hakkâri"
                        },
                        new
                        {
                            Id = 31,
                            ProvinceName = "Hatay"
                        },
                        new
                        {
                            Id = 32,
                            ProvinceName = "Isparta"
                        },
                        new
                        {
                            Id = 33,
                            ProvinceName = "Mersin"
                        },
                        new
                        {
                            Id = 34,
                            ProvinceName = "İstanbul"
                        },
                        new
                        {
                            Id = 35,
                            ProvinceName = "İzmir"
                        },
                        new
                        {
                            Id = 36,
                            ProvinceName = "Kars"
                        },
                        new
                        {
                            Id = 37,
                            ProvinceName = "Kastamonu"
                        },
                        new
                        {
                            Id = 38,
                            ProvinceName = "Kayseri"
                        },
                        new
                        {
                            Id = 39,
                            ProvinceName = "Kırklareli"
                        },
                        new
                        {
                            Id = 40,
                            ProvinceName = "Kırşehir"
                        },
                        new
                        {
                            Id = 41,
                            ProvinceName = "Kocaeli"
                        },
                        new
                        {
                            Id = 42,
                            ProvinceName = "Konya"
                        },
                        new
                        {
                            Id = 43,
                            ProvinceName = "Kütahya"
                        },
                        new
                        {
                            Id = 44,
                            ProvinceName = "Malatya"
                        },
                        new
                        {
                            Id = 45,
                            ProvinceName = "Manisa"
                        },
                        new
                        {
                            Id = 46,
                            ProvinceName = "Kahramanmaraş"
                        },
                        new
                        {
                            Id = 47,
                            ProvinceName = "Mardin"
                        },
                        new
                        {
                            Id = 48,
                            ProvinceName = "Muğla"
                        },
                        new
                        {
                            Id = 49,
                            ProvinceName = "Muş"
                        },
                        new
                        {
                            Id = 50,
                            ProvinceName = "Nevşehir"
                        },
                        new
                        {
                            Id = 51,
                            ProvinceName = "Niğde"
                        },
                        new
                        {
                            Id = 52,
                            ProvinceName = "Ordu"
                        },
                        new
                        {
                            Id = 53,
                            ProvinceName = "Rize"
                        },
                        new
                        {
                            Id = 54,
                            ProvinceName = "Sakarya"
                        },
                        new
                        {
                            Id = 55,
                            ProvinceName = "Samsun"
                        },
                        new
                        {
                            Id = 56,
                            ProvinceName = "Siirt"
                        },
                        new
                        {
                            Id = 57,
                            ProvinceName = "Sinop"
                        },
                        new
                        {
                            Id = 58,
                            ProvinceName = "Sivas"
                        },
                        new
                        {
                            Id = 59,
                            ProvinceName = "Tekirdağ"
                        },
                        new
                        {
                            Id = 60,
                            ProvinceName = "Tokat"
                        },
                        new
                        {
                            Id = 61,
                            ProvinceName = "Trabzon"
                        },
                        new
                        {
                            Id = 62,
                            ProvinceName = "Tunceli"
                        },
                        new
                        {
                            Id = 63,
                            ProvinceName = "Şanlıurfa"
                        },
                        new
                        {
                            Id = 64,
                            ProvinceName = "Uşak"
                        },
                        new
                        {
                            Id = 65,
                            ProvinceName = "Van"
                        },
                        new
                        {
                            Id = 66,
                            ProvinceName = "Yozgat"
                        },
                        new
                        {
                            Id = 67,
                            ProvinceName = "Zonguldak"
                        },
                        new
                        {
                            Id = 68,
                            ProvinceName = "Aksaray"
                        },
                        new
                        {
                            Id = 69,
                            ProvinceName = "Bayburt"
                        },
                        new
                        {
                            Id = 70,
                            ProvinceName = "Karaman"
                        },
                        new
                        {
                            Id = 71,
                            ProvinceName = "Kırıkkale"
                        },
                        new
                        {
                            Id = 72,
                            ProvinceName = "Batman"
                        },
                        new
                        {
                            Id = 73,
                            ProvinceName = "Şırnak"
                        },
                        new
                        {
                            Id = 74,
                            ProvinceName = "Bartın"
                        },
                        new
                        {
                            Id = 75,
                            ProvinceName = "Ardahan"
                        },
                        new
                        {
                            Id = 76,
                            ProvinceName = "Iğdır"
                        },
                        new
                        {
                            Id = 77,
                            ProvinceName = "Yalova"
                        },
                        new
                        {
                            Id = 78,
                            ProvinceName = "Karabük"
                        },
                        new
                        {
                            Id = 79,
                            ProvinceName = "Kilis"
                        },
                        new
                        {
                            Id = 80,
                            ProvinceName = "Osmaniye"
                        },
                        new
                        {
                            Id = 81,
                            ProvinceName = "Düzce"
                        });
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.UserLoad", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LoadId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "LoadId");

                    b.HasIndex("LoadId");

                    b.ToTable("UserLoads");
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.UserVehicle", b =>
                {
                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VehicleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserVehicles");
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReady")
                        .HasColumnType("bit");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("TrailerPlate")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("VehicleBodyId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Plate")
                        .IsUnique();

                    b.HasIndex("ProvinceId");

                    b.HasIndex("VehicleBodyId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.VehicleBody", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("BodyName")
                        .IsUnique();

                    b.ToTable("VehicleBodies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BodyName = "Kapalı Kasa"
                        },
                        new
                        {
                            Id = 2,
                            BodyName = "Açık Kasa"
                        },
                        new
                        {
                            Id = 3,
                            BodyName = "Tenteli"
                        },
                        new
                        {
                            Id = 4,
                            BodyName = "Soğutucu"
                        },
                        new
                        {
                            Id = 5,
                            BodyName = "Tanker"
                        },
                        new
                        {
                            Id = 6,
                            BodyName = "Damperli"
                        },
                        new
                        {
                            Id = 7,
                            BodyName = "Platform"
                        },
                        new
                        {
                            Id = 8,
                            BodyName = "Konteyner Taşıyıcı"
                        },
                        new
                        {
                            Id = 9,
                            BodyName = "Lowbed"
                        },
                        new
                        {
                            Id = 10,
                            BodyName = "Silobas"
                        },
                        new
                        {
                            Id = 11,
                            BodyName = "Frigofrik"
                        },
                        new
                        {
                            Id = 12,
                            BodyName = "Canlı Hayvan Taşıyıcı"
                        },
                        new
                        {
                            Id = 13,
                            BodyName = "Araç Taşıyıcı"
                        });
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "Tır"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "Kamyon"
                        },
                        new
                        {
                            Id = 3,
                            TypeName = "Kamyonet"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("yukumyolda.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("yukumyolda.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("yukumyolda.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("yukumyolda.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yukumyolda.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("yukumyolda.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.Evaluation", b =>
                {
                    b.HasOne("yukumyolda.Domain.Entities.User", "EvaluatedUser")
                        .WithMany("ReceivedEvaluations")
                        .HasForeignKey("EvaluatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("yukumyolda.Domain.Entities.User", "EvaluatorUser")
                        .WithMany("GivenEvaluations")
                        .HasForeignKey("EvaluatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("yukumyolda.Domain.Entities.Load", "Load")
                        .WithMany("Evaluations")
                        .HasForeignKey("LoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluatedUser");

                    b.Navigation("EvaluatorUser");

                    b.Navigation("Load");
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.Load", b =>
                {
                    b.HasOne("yukumyolda.Domain.Entities.Province", "DepartureProvince")
                        .WithMany("DepartureLoads")
                        .HasForeignKey("DeparturevId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("yukumyolda.Domain.Entities.Province", "DestinationProvince")
                        .WithMany("DestinationLoads")
                        .HasForeignKey("DestinationProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("yukumyolda.Domain.Entities.LoadStatus", "LoadStatus")
                        .WithMany("Loads")
                        .HasForeignKey("LoadStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yukumyolda.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartureProvince");

                    b.Navigation("DestinationProvince");

                    b.Navigation("LoadStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.UserLoad", b =>
                {
                    b.HasOne("yukumyolda.Domain.Entities.Load", "Load")
                        .WithMany("UserLoads")
                        .HasForeignKey("LoadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("yukumyolda.Domain.Entities.User", "User")
                        .WithMany("UserLoads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Load");

                    b.Navigation("User");
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.UserVehicle", b =>
                {
                    b.HasOne("yukumyolda.Domain.Entities.User", "User")
                        .WithOne("UserVehicle")
                        .HasForeignKey("yukumyolda.Domain.Entities.UserVehicle", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yukumyolda.Domain.Entities.Vehicle", "Vehicle")
                        .WithOne("UserVehicle")
                        .HasForeignKey("yukumyolda.Domain.Entities.UserVehicle", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("yukumyolda.Domain.Entities.Province", "Province")
                        .WithMany("Vehicles")
                        .HasForeignKey("ProvinceId");

                    b.HasOne("yukumyolda.Domain.Entities.VehicleBody", "VehicleBody")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleBodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yukumyolda.Domain.Entities.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");

                    b.Navigation("VehicleBody");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.Load", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("UserLoads");
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.LoadStatus", b =>
                {
                    b.Navigation("Loads");
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.Province", b =>
                {
                    b.Navigation("DepartureLoads");

                    b.Navigation("DestinationLoads");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.User", b =>
                {
                    b.Navigation("GivenEvaluations");

                    b.Navigation("ReceivedEvaluations");

                    b.Navigation("UserLoads");

                    b.Navigation("UserVehicle");
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("UserVehicle")
                        .IsRequired();
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.VehicleBody", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("yukumyolda.Domain.Entities.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
